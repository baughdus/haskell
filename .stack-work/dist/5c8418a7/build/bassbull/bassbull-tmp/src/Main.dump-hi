
==================== FINAL INTERFACE ====================
2018-05-22 04:45:56.1666074 UTC

interface main:Main 8022
  interface hash: 9080322baaad49566286d7c26219563b
  ABI hash: 92789d459704fd858d6ce10237a64f25
  export-list hash: 621929ce6b935b6244ff2eaa412869be
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d0272564e9e20e030173cc4a7feb8672
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.fip
  Main.main
  Main.xFip
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:System.IO 1fb8f1d116df69c8750950ac088a90e6
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
c2afea9fd388077ce9d3c9721889a31d
  fip ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (5, True, False)
                (\ (hr :: GHC.Types.Float)
                   (bb :: GHC.Types.Float)
                   (hbp :: GHC.Types.Float)
                   (k :: GHC.Types.Float)
                   (ip :: GHC.Types.Float) ->
                 case hr of wild3 { GHC.Types.F# y ->
                 case bb of wild2 { GHC.Types.F# x ->
                 case hbp of wild1 { GHC.Types.F# y1 ->
                 case k of wild5 { GHC.Types.F# y2 ->
                 case ip of wild6 { GHC.Types.F# y3 ->
                 case GHC.Prim.divideFloat#
                        (GHC.Prim.minusFloat#
                           (GHC.Prim.plusFloat#
                              (GHC.Prim.timesFloat# 13.0# y)
                              (GHC.Prim.timesFloat# 3.0# (GHC.Prim.plusFloat# x y1)))
                           (GHC.Prim.plusFloat# y2 y2))
                        y3 of wild4 { DEFAULT ->
                 GHC.Types.F# (GHC.Prim.plusFloat# wild4 3.139#) } } } } } }) -}
0e28dede6d1accac2c4b4a432aa106be
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
f70e032ca170bc0db7febc5a2f4cf092
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv }) -}
899a57e6f0b6979cdc57275c36cf840d
  main2 :: GHC.Base.String
  {- Unfolding: (Main.main3 (GHC.Types.[] @ GHC.Types.Char)) -}
6f8e067370498d4da5ecd12e7552146d
  main3 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat1
                   GHC.Float.$fShowFloat2
                   GHC.Float.minExpt
                   3.5433688#) -}
3f6e02adb1f7d62619f4a4d3fcf375db
  main4 :: GHC.Base.String
  {- Unfolding: (Main.main5 (GHC.Types.[] @ GHC.Types.Char)) -}
4aba0b0fa7211e256173babc90af9514
  main5 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat1
                   GHC.Float.$fShowFloat2
                   GHC.Float.minExpt
                   2.1924438#) -}
f931004b5599224029275657e50792e6
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
f7c454a8fb75d4862e81059af07fb173
  xFip ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (6, True, False)
                (\ (fb :: GHC.Types.Float)
                   (lgFb :: GHC.Types.Float)
                   (bb :: GHC.Types.Float)
                   (hbp :: GHC.Types.Float)
                   (k :: GHC.Types.Float)
                   (ip :: GHC.Types.Float) ->
                 case fb of wild2 { GHC.Types.F# x ->
                 case lgFb of wild3 { GHC.Types.F# y ->
                 case bb of wild1 { GHC.Types.F# x1 ->
                 case hbp of wild5 { GHC.Types.F# y1 ->
                 case k of wild6 { GHC.Types.F# y2 ->
                 case ip of wild7 { GHC.Types.F# y3 ->
                 case GHC.Prim.divideFloat#
                        (GHC.Prim.minusFloat#
                           (GHC.Prim.plusFloat#
                              (GHC.Prim.timesFloat# 13.0# (GHC.Prim.timesFloat# x y))
                              (GHC.Prim.timesFloat# 3.0# (GHC.Prim.plusFloat# x1 y1)))
                           (GHC.Prim.plusFloat# y2 y2))
                        y3 of wild4 { DEFAULT ->
                 GHC.Types.F# (GHC.Prim.plusFloat# wild4 3.139#) } } } } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

